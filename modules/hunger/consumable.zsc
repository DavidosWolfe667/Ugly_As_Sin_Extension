// A base class for all consumable (food) items to inherit from
class UaS_Consumable : HDWeapon abstract {
	default {
		UaS_Consumable.Calories 0; // Calories / kCals provided by this consumable
		UaS_Consumable.Fluid 0; // Milliliteres of hydration provided by this consumable
		UaS_Consumable.Bulk 5;
		UaS_Consumable.Description "A generic block of vaguely food-like mush with moderate nutritional value. Probably obtained via console commands.";
		UaS_Consumable.OpenSound "UaS/FoodOpen";
		-UaS_Consumable.RESEALABLE;

		Inventory.PickupMessage "Picked up a generic consumable. You really shouldn't have this.";
		Inventory.Icon "HSCVB0";
		tag "Generic Consumable";
	}
}

// =========================
// PAY NO ATTENTION TO THE
// CODE BEHIND THE CURTAIN
// =========================
extend class UaS_Consumable {
	uint ConsumableFlags;
	int calories;
	int fluid;
	double bulk;
	string description;
	string opensound;
	string statusMessage;
	property Calories: calories;
	property Fluid: fluid;
	property Bulk: bulk;
	property Description: description;
	property OpenSound: opensound;
	flagdef RESEALABLE: ConsumableFlags, 0;
	flagdef DRINKABLE: ConsumableFlags, 1;
	flagdef PACKAGED: ConsumableFlags, 2;
	UaS_HungerTracker tracker;

	default {
		Inventory.PickupSound "weapons/pocket";
		+INVENTORY.INVBAR;
		+INVENTORY.IGNORESKILL;
		+WEAPON.DONTBOB;
	}

	override double weaponbulk() { return bulk - (weaponstatus[UGCS_CONSUMED]); }

	override void DoEffect() {
		if (!CriticalChecks()) { return; }
		HandleInput();
		DoMessage();
	}

	override void Tick() {
		super.tick();
		if (weaponbulk() <= 0) { destroy(); }
	}

	bool CriticalChecks() {
		// Skip all interaction if not selected
		if (!owner) { return false; }
		if (!(owner.player.readyweapon is 'UaS_Consumable')) { return false; }
		if (owner.health <= 0) { return false; }

		// Set up tracker connection
		tracker = UaS_HungerTracker(owner.FindInventory("UaS_HungerTracker"));
		if (!tracker) { console.printf("no hunger tracker!"); return false; }

		return true;
	}

	void DoMessage() {
		statusMessage =
			"\cj"..gettag().."\n"..
			"---------------\n"..
			description.."\n";
		// ===word-wrap routine, not necessary===
		// string descline;
		// array<string> desc;
		// description.split(desc, " ");
		// for (int i=0; i<desc.size(); i++) {
			// descline.appendformat(desc[i].." ");
			// if (descline.length() > 25 || i == desc.size() - 1) {
				// descline.appendformat("\n");
				// statusMessage.appendformat(descline);
				// descline = "";
			// }
		// }
		//statusMessage.appendformat("\n");
		for (int i=1; i<=10; i++) {
			statusMessage.appendformat("\n");
		}
		statusMessage.appendformat(
			"\ce%i Calories\n"..
			"\ce%i mL Fluids\n\n"..
			"\cw%.2f%% left\n",
			calories, fluid, (weaponbulk()/bulk)*100);

		if (!tracker.mouthclear() && level.time % 10 != 0) {
			statusMessage.appendformat("Consuming...");
		}

		A_WeaponMessage(statusMessage);
	}

	void HandleInput() {
		int bt = owner.player.cmd.buttons;
		int bto = owner.player.oldbuttons;

		//Take a bite
		if ((bt & BT_ATTACK) && !(bto & BT_ATTACK) && tracker.mouthclear()) {
			int bitesize = int(calories / (bulk));
			int sipsize = int(fluid / (bulk));
			tracker.mouth = random[uas_hunger](3,5);
			tracker.mouth_calories = bitesize;
			tracker.mouth_fluid = sipsize;
			weaponstatus[UGCS_CONSUMED]++;
			if (bDRINKABLE) {
				tracker.drinking = true;
				owner.A_StartSound("UaS/Swish", CHAN_WEAPON);
			}
		}
	}

	States {
		Spawn:
			TNT1 A -1 { invoker.UpdateSprite(); }
			Stop;
		Ready:
			TNT1 A 1 A_WeaponReady(WRF_NOFIRE);
			Loop;
	}

	override void BeginPlay() {
		UpdateSprite();
		super.BeginPlay();
	}

	override void InitializeWepStats(bool idfa) {
		weaponstatus[UGCS_CONSUMED] = 0;
		if (bPACKAGED) { weaponstatus[UGCS_OPEN] = false; }
	}

	void UpdateSprite() {
		string ic = TexMan.GetName(icon);
		string sp = ic.Left(4);
		string fr = ic.Mid(4, 1);
		sprite = GetSpriteIndex(sp);
		frame = (fr.ByteAt(0)-65);
	}

	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl) {
		sb.drawimage(TexMan.GetName(icon),(0,0),
			sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER|sb.DI_TRANSLATABLE,
			scale:(2,2)
		);
	}
}

enum ConsumableSlots {
	UGCS_CONSUMED,
	UGCS_OPEN,
}
