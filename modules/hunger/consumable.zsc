// A base class for all consumable (food) items to inherit from
class UaS_Consumable : HDWeapon abstract {
	default {
		UaS_Consumable.Calories 100; // Calories / kCals provided by this consumable
		UaS_Consumable.Fluid 25; // Milliliteres of hydration provided by this consumable
		UaS_Consumable.Bulk 2; // Bulk Units, also influences number of "swallows" when consumed
		UaS_Consumable.Description ""; // Description shown to player
		UaS_Consumable.OpenSound "UaS/FoodOpen"; // Sound played when opening packaged food item
		//+UaS_Consumable.RESEALABLE;
		//+UaS_Consumable.DRINKABLE;
		//+UaS_Consumable.PACKAGED;

		Inventory.PickupMessage "";
		Inventory.Icon "HSCVA0";
		tag "";
	}
}

// =========================
// PAY NO ATTENTION TO THE
// CODE BEHIND THE CURTAIN
// =========================
extend class UaS_Consumable {
	mixin UaS_FoodItemMixin;
	uint ConsumableFlags;
	int calories;
	int fluid;
	double bulk, diffbulk;
	property Calories: calories;
	property Fluid: fluid;
	property Bulk: bulk;
	flagdef RESEALABLE: ConsumableFlags, 0;
	flagdef DRINKABLE: ConsumableFlags, 1;
	flagdef PACKAGED: ConsumableFlags, 2;
	UaS_HungerTracker tracker;

	default {
		UaS_Consumable.OpenSound "UaS/FoodOpen";
		Inventory.PickupSound "weapons/pocket";
		+INVENTORY.INVBAR;
		+INVENTORY.IGNORESKILL;
		+WEAPON.DONTBOB;
		+HDWEAPON.FITSINBACKPACK;
		-UaS_Consumable.RESEALABLE;
		-UaS_Consumable.DRINKABLE;
		-UaS_Consumable.PACKAGED;
	}

	override double weaponbulk() { return bulk - (weaponstatus[UGCS_CONSUMED]); }

	override void DoEffect() {
		if (!CriticalChecks()) { return; }
		HandleInput();
		DoMessage();
	}

	override void Tick() {
		super.tick();
		if (int(weaponbulk() + diffbulk) <= 0) {
			if(owner) { owner.dropinventory(self); }
			else { destroy(); }
		}
		if (diffbulk > 0) { diffbulk *= 0.9; }
	}

	bool CriticalChecks() {
		// Skip all interaction if not selected
		if (!owner) { return false; }
		if (!(owner.player.readyweapon == self)) { return false; }
		if (owner.health <= 0) { return false; }

		// Set up tracker connection
		tracker = UaS_HungerTracker(owner.FindInventory("UaS_HungerTracker"));
		if (!tracker) { console.printf("no hunger tracker!"); return false; }

		return true;
	}

	void DoMessage() {
		string statusMessage;
		statusMessage.appendformat("--- \cj%s\c- ---\n", gettag());
		statusMessage.appendformat("%s\n", description);
		for (int i=1; i<=int(description.length()/40)+1; i++) { statusMessage.appendformat("\n"); }
		statusMessage.appendformat(
			"\ce%i Calories\n"..
			"\ce%i mL Fluids\n\n",
			calories, fluid);
		if (bPACKAGED && weaponstatus[UGCS_OPEN] == UGCSF_SEALED) { statusMessage.appendformat("Package Closed\n"); }
		else { statusMessage.appendformat("\cw%.0f%% Remaining\n", ((weaponbulk()/bulk)*100) + max(diffbulk, 0)); }
		if (!tracker.mouthclear() && level.time % 10 != 0) { statusMessage.appendformat("Consuming..."); }
		A_WeaponMessage(statusMessage);
	}

	void HandleInput() {
		int bt = owner.player.cmd.buttons;
		int bto = owner.player.oldbuttons;

		// when consumable open
		if (weaponstatus[UGCS_OPEN] == UGCSF_OPENED && weaponbulk() > 0) {
			//Take a bite
			if ((bt & BT_ATTACK) && !(bto & BT_ATTACK) && tracker.mouthclear()) {
				int bitesize = int(calories / (bulk));
				int sipsize = int(fluid / (bulk));
				int mouthful = random[uas_hunger](4,6);
				weaponstatus[UGCS_CONSUMED]++;
				diffbulk = 100/bulk;
				if (bDRINKABLE) {
					tracker.drinking = true;
					owner.A_StartSound("UaS/Swish", CHAN_WEAPON);
					mouthful = int(mouthful / 2);
				}
				tracker.EatOrDrink(bitesize, sipsize, mouthful);
			}
			// reseal package (may add spoilage later)
			if (bRESEALABLE && (bt & BT_RELOAD) && !(bto & BT_RELOAD)) {
				weaponstatus[UGCS_OPEN] = UGCSF_SEALED;
				owner.A_StartSound("weapons/pocket",
					CHAN_WEAPON, CHANF_OVERLAP,
					volume: 0.75, ATTN_STATIC, pitch: 1.15);
			}
		}
		// when consumable sealed
		else if (weaponstatus[UGCS_OPEN] == UGCSF_SEALED) {
			if ((bt & BT_UNLOAD) && !(bto & BT_UNLOAD)) {
				owner.A_StartSound(opensound,
					CHAN_WEAPON, CHANF_OVERLAP,
					volume: 0.25, ATTN_STATIC, pitch: 0.9);
				weaponstatus[UGCS_OPEN] = UGCSF_OPENED;
				owner.A_Log(string.format("Opened %s. %s", gettag(), RandomOpenMessage()), true);
			}

		}
	}

	override void InitializeWepStats(bool idfa) {
		weaponstatus[UGCS_CONSUMED] = 0;
		if (bPACKAGED) { weaponstatus[UGCS_OPEN] = false; }
		else { weaponstatus[UGCS_OPEN] = true; }
	}
}

enum ConsumableSlots {
	UGCS_CONSUMED,
	UGCS_OPEN,
}

enum ConsumableStatusFlags {
	UGCSF_SEALED = 0,
	UGCSF_OPENED = 1,
}
