// A base class for all consumable (food) items to inherit from
class UaS_Consumable : HDWeapon abstract {
	default {
		UaS_Consumable.Calories 100; // Calories / kCals provided by this consumable
		UaS_Consumable.Fluid 25; // Milliliteres of hydration provided by this consumable
		UaS_Consumable.Bulk 2; // Bulk Units, also influences number of "swallows" when consumed
		UaS_Consumable.Description ""; // Description shown to player
		UaS_Consumable.OpenMessage1 ""; // Random message shown when opening or selecting
		UaS_Consumable.OpenMessage2 ""; // Random message shown when opening or selecting
		UaS_Consumable.OpenMessage3 ""; // Random message shown when opening or selecting
		UaS_Consumable.OpenSound "UaS/FoodOpen"; // Sound played when opening packaged food item
		//+UaS_Consumable.RESEALABLE;
		//+UaS_Consumable.DRINKABLE;
		//+UaS_Consumable.PACKAGED;

		Inventory.PickupMessage "";
		Inventory.Icon "";
		tag "";
	}
}

// =========================
// PAY NO ATTENTION TO THE
// CODE BEHIND THE CURTAIN
// =========================
extend class UaS_Consumable {
	uint ConsumableFlags;
	int calories;
	int fluid;
	double bulk;
	string description;
	string opensound;
	string openmessage1, openmessage2, openmessage3;
	string statusMessage;
	property Calories: calories;
	property Fluid: fluid;
	property Bulk: bulk;
	property Description: description;
	property OpenMessage1: openmessage1;
	property OpenMessage2: openmessage2;
	property OpenMessage3: openmessage3;
	property OpenSound: opensound;
	flagdef RESEALABLE: ConsumableFlags, 0;
	flagdef DRINKABLE: ConsumableFlags, 1;
	flagdef PACKAGED: ConsumableFlags, 2;
	UaS_HungerTracker tracker;

	default {
		UaS_Consumable.OpenSound "UaS/FoodOpen";
		Inventory.PickupSound "weapons/pocket";
		+INVENTORY.INVBAR;
		+INVENTORY.IGNORESKILL;
		+WEAPON.DONTBOB;
		+HDWEAPON.FITSINBACKPACK;
	}

	override double weaponbulk() { return bulk - (weaponstatus[UGCS_CONSUMED]); }
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}

	override void DoEffect() {
		if (!CriticalChecks()) { return; }
		HandleInput();
		DoMessage();
	}

	override void Tick() {
		super.tick();
		if (weaponbulk() <= 0) { destroy(); }
	}

	bool CriticalChecks() {
		// Skip all interaction if not selected
		if (!owner) { return false; }
		if (!(owner.player.readyweapon == self)) { return false; }
		if (owner.health <= 0) { return false; }

		// Set up tracker connection
		tracker = UaS_HungerTracker(owner.FindInventory("UaS_HungerTracker"));
		if (!tracker) { console.printf("no hunger tracker!"); return false; }

		return true;
	}

	void DoMessage() {
		statusMessage =
			"--- \cj"..gettag().."\c- ---\n"..
			description.."\n";
		// ===word-wrap routine, not necessary===
		// string descline;
		// array<string> desc;
		// description.split(desc, " ");
		// for (int i=0; i<desc.size(); i++) {
			// descline.appendformat(desc[i].." ");
			// if (descline.length() > 25 || i == desc.size() - 1) {
				// descline.appendformat("\n");
				// statusMessage.appendformat(descline);
				// descline = "";
			// }
		// }
		//statusMessage.appendformat("\n");
		for (int i=1; i<=10; i++) {
			statusMessage.appendformat("\n");
		}
		statusMessage.appendformat(
			"\ce%i Calories\n"..
			"\ce%i mL Fluids\n\n",
			calories, fluid);

		if (bPACKAGED && weaponstatus[UGCS_OPEN] == UGCSF_SEALED) {
			statusMessage.appendformat("Package Closed\n");
		}
		else {
			statusMessage.appendformat("\cw%.1f%% Remaining\n", (weaponbulk()/bulk)*100);
		}

		if (!tracker.mouthclear() && level.time % 10 != 0) {
			statusMessage.appendformat("Consuming...");
		}

		A_WeaponMessage(statusMessage);
	}

	void HandleInput() {
		int bt = owner.player.cmd.buttons;
		int bto = owner.player.oldbuttons;

		// when consumable open
		if (weaponstatus[UGCS_OPEN] == UGCSF_OPENED) {
			//Take a bite
			if ((bt & BT_ATTACK) && !(bto & BT_ATTACK) && tracker.mouthclear()) {
				int bitesize = int(calories / (bulk));
				int sipsize = int(fluid / (bulk));
				tracker.EatOrDrink(bitesize, sipsize, random[uas_hunger](3,5));
				weaponstatus[UGCS_CONSUMED]++;
				if (bDRINKABLE) {
					tracker.drinking = true;
					owner.A_StartSound("UaS/Swish", CHAN_WEAPON);
				}
			}
			// reseal package (may add spoilage later)
			if (bRESEALABLE && (bt & BT_RELOAD) && !(bto & BT_RELOAD)) {
				weaponstatus[UGCS_OPEN] = UGCSF_SEALED;
				owner.A_StartSound("weapons/pocket",
					CHAN_WEAPON, CHANF_OVERLAP,
					volume: 0.75, ATTN_STATIC, pitch: 1.15);
			}
		}
		// when consumable sealed
		else if (weaponstatus[UGCS_OPEN] == UGCSF_SEALED) {
			if ((bt & BT_UNLOAD) && !(bto & BT_UNLOAD)) {
				owner.A_StartSound(opensound,
					CHAN_WEAPON, CHANF_OVERLAP,
					volume: 0.25, ATTN_STATIC, pitch: 0.9);
				weaponstatus[UGCS_OPEN] = UGCSF_OPENED;
				owner.A_Log(string.format("Opened %s. %s", gettag(), RandomMessage()), true);
			}

		}
	}

	States {
		Spawn:
			TNT1 A -1 { invoker.UpdateSprite(); }
			Stop;
		Select:
			TNT1 A 0 { invoker.SelectMessage(); }
			goto super::Select;
		Ready:
			TNT1 A 1 A_WeaponReady(WRF_NOFIRE);
			Loop;
	}

	void SelectMessage() {
		// if (weaponstatus[UGCS_OPEN] == UGCSF_OPENED) {
			// owner.A_Log(RandomMessage(), true);
		// }
	}

	string RandomMessage() {
		int r = randompick[uas_hunger](1,2,3);
		switch(r) {
			case 1: return openmessage1; break;
			case 2: return openmessage1; break;
			case 3: return openmessage1; break;
		}
		return "";
	}

	override void BeginPlay() {
		UpdateSprite();
		super.BeginPlay();
	}

	override void InitializeWepStats(bool idfa) {
		weaponstatus[UGCS_CONSUMED] = 0;
		if (bPACKAGED) { weaponstatus[UGCS_OPEN] = false; }
	}

	void UpdateSprite() {
		string ic = TexMan.GetName(icon);
		string sp = ic.Left(4);
		string fr = ic.Mid(4, 1);
		sprite = GetSpriteIndex(sp);
		frame = (fr.ByteAt(0)-65);
	}

	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl) {
		sb.drawimage(TexMan.GetName(icon),(0,0),
			sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER|sb.DI_TRANSLATABLE,
			scale:(2,2)
		);
	}
}

enum ConsumableSlots {
	UGCS_CONSUMED,
	UGCS_OPEN,
}

enum ConsumableStatusFlags {
	UGCSF_SEALED = 0,
	UGCSF_OPENED = 1,
}
