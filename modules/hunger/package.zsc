class UaS_FoodPackage : HDWeapon abstract {
	default {
		UaS_FoodPackage.Description ""; // Description shown to player
		UaS_FoodPackage.OpenMessage1 ""; // Random message shown when opening or selecting
		UaS_FoodPackage.OpenMessage2 ""; // Random message shown when opening or selecting
		UaS_FoodPackage.OpenMessage3 ""; // Random message shown when opening or selecting
		Inventory.PickupMessage "";
		Inventory.Icon "";
		tag "";
	}

	abstract void Contents();
		// AddItem("UaS_FoodRation");
}

// =========================
// PAY NO ATTENTION TO THE
// CODE BEHIND THE CURTAIN
// =========================
extend class UaS_FoodPackage {
	mixin UaS_FoodItemMixin;
	array<string> FoodList;
	array<string> NiceFoodList;
	double calculatedbulk;

	default {
		Inventory.PickupSound "weapons/pocket";
		UaS_FoodPackage.OpenSound "UaS/FoodOpen";
		+INVENTORY.INVBAR;
		+INVENTORY.IGNORESKILL;
		+WEAPON.DONTBOB;
		+HDWEAPON.FITSINBACKPACK;
	}

	void AddItem(string FoodItem, int quantity = 1) {
		class<actor> newItem = (class<actor>)(FoodItem);
		if (!newItem || !(newItem is (class<actor>)('UaS_Consumable'))) {
			A_Log(string.format("\ci%s: Invalid class '%s'! Ignoring...", GetClassName(), newItem.GetClassName()));
			return;
		}
		for (int i=1; i<= quantity; i++) {
			FoodList.push(FoodItem);
			NiceFoodList.push(getdefaultbytype(newItem).gettag());
			calculatedbulk += UaS_Consumable(getdefaultbytype((class<actor>)(FoodItem))).bulk;
		}
	}

	override void DoEffect() {
		if (!owner) { return; }
		if (!(owner.player.readyweapon == self)) { return; }
		if (owner.health <= 0) { return; }

		DoMessage();
		HandleInput();
	}

	void DoMessage() {
		string statusMessage;
		statusMessage.appendformat("--- \cc%s\c- ---\n", gettag());
		statusMessage.appendformat("%s\n", description);
		for (int i=1; i<=int(description.length()/40)+1; i++) { statusMessage.appendformat("\n"); }
		statusMessage.appendformat("\cpContents\n");
		for (int i=0; i<NiceFoodList.size(); i++) { statusMessage.appendformat("\ce%s\n", NiceFoodList[i]); }
		A_WeaponMessage(statusMessage);
	}

	void HandleInput() {
		int bt = owner.player.cmd.buttons;
		int bto = owner.player.oldbuttons;
		if ((bt & BT_UNLOAD) && !(bto & BT_UNLOAD)) {
			owner.A_Log(string.format("Opened %s. %s", gettag(), RandomMessage()), true);
			owner.A_StartSound(opensound,
				CHAN_WEAPON, CHANF_OVERLAP,
				volume: 0.25, ATTN_STATIC, pitch: 0.9);
			for (int i=0; i<FoodList.size(); i++) {
				owner.A_GiveInventory("HDWeaponGiver");
				HDWeaponGiver wg = HDWeaponGiver(owner.findinventory("HDWeaponGiver"));
				wg.weapontogive = FoodList[i];
				wg.spawnactualweapon();
				wg.destroy();
				//owner.A_GiveInventory(FoodList[i]);
			}
			destroy();
		}
	}

	override void InitializeWepStats(bool idfa) { Contents(); }

	override double weaponbulk() { return calculatedbulk * 0.7; }
}
