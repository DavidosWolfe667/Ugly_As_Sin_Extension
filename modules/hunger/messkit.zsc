class UaS_FoodManager : HDWeapon {
	array<UaS_Consumable> foodarray;
	UaS_HungerTracker tracker;
	string statusMessage;

	default {
		Scale 0.5;
		Inventory.PickupMessage "Picked up messkit.";
		Inventory.Icon "HSCVB0";
		-INVENTORY.INVBAR;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.IGNORESKILL;
		+INVENTORY.UNTOSSABLE;
		tag "Food Manager";
		-hdweapon.fitsinbackpack;
	}

	override double weaponbulk(){
		return 15;
	}

	override void DoEffect() {
		if (!CriticalChecks()) { return; }

		statusMessage = "... \cjFood Manager\c- ...\n\n";

		DisplayList();
		HandleInput();

		debugstatus();
		A_WeaponMessage(statusMessage);
	}

	bool CriticalChecks() {
		FoodList();
		if (!(owner.player.readyweapon is 'UaS_FoodManager')) { return false; }
		tracker = UaS_HungerTracker(owner.FindInventory("UaS_HungerTracker"));
		if (!tracker) { console.printf("no hunger tracker!"); return false; }
		return true;
	}

	void HandleInput() {
		int bt = owner.player.cmd.buttons;
		int bto = owner.player.oldbuttons;
		if ((bt & BT_RELOAD) && !(bto & BT_RELOAD)) {
			weaponstatus[FMS_SELECTED]++;
			if (weaponstatus[FMS_SELECTED] >= foodarray.size()) { weaponstatus[FMS_SELECTED] = 0; }
		}
		else if ((bt & BT_ALTRELOAD) && !(bto & BT_ALTRELOAD)) {
			weaponstatus[FMS_SELECTED]--;
			if (weaponstatus[FMS_SELECTED] < 0) { weaponstatus[FMS_SELECTED] = foodarray.size()-1; }
		}
	}

	void FoodList() {
		foodarray.clear();
		let i = owner.inv;
		while (i) {
			if (i is 'UaS_Consumable') {
				UaS_Consumable fi = UaS_Consumable(i);
				foodarray.push(fi);
			}
			i = i.inv;
		}
		bINVBAR = (foodarray.size() > 0);
	}

	void DisplayList() {
		if (foodarray.size() == 0) {
			statusmessage = statusmessage.."No consumables!\n\n";
			return;
		}
		else {
			for (int i=0; i < foodarray.size(); i++) {
				if (i == weaponstatus[FMS_SELECTED]) { statusmessage = statusmessage.."\cb"; }
				statusmessage = statusmessage
					..foodarray[i].gettag().." \c-x"
					..owner.countinv(foodarray[i].GetClassName()).."\n";
			}
		}
		statusmessage = statusmessage.."\n";
	}

	void debugstatus() {
		if (!(UaS_Debug & Hunger)) { return; }
		statusMessage = statusMessage
			.."energy "..int(tracker.calories).."\n"
			.."fluid "..int(tracker.water).."\n";
	}

	enum Slots {
		FMS_SELECTED,
	}
}
