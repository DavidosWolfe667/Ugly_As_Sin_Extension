class UaS_MessKit : HDWeapon {
	array<UaS_Consumable> foodarray;
	UaS_HungerTracker tracker;
	string statusMessage;

	default {
		Scale 0.5;
		Inventory.PickupMessage "";
		Inventory.Icon "HSCVB0";
		Inventory.MaxAmount 1;
		-INVENTORY.INVBAR;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.IGNORESKILL;
		+INVENTORY.UNTOSSABLE;
		tag "Messkit";
		-hdweapon.fitsinbackpack;
	}

	override double weaponbulk(){
		return 15;
	}

	override void DoEffect() {
		if (!CriticalChecks()) { return; }

		statusMessage = "... \cjMesskit\c- ...\n\n";

		DisplayList();
		HandleInput();

		debugstatus();
		A_WeaponMessage(statusMessage);
	}

	override void Tick() {
		BuildFoodList();
		bINVBAR = (foodarray.size() > 0);
		Consume();
	}

	bool CriticalChecks() {
		if (!(owner.player.readyweapon is 'UaS_Messkit')) { return false; }
		tracker = UaS_HungerTracker(owner.FindInventory("UaS_HungerTracker"));
		if (!tracker) { console.printf("no hunger tracker!"); return false; }
		return true;
	}

	void HandleInput() {
		int bt = owner.player.cmd.buttons;
		int bto = owner.player.oldbuttons;
		UaS_Consumable item = foodarray[weaponstatus[MKS_SELECTED]];

		//Take a bite
		if ((bt & BT_ATTACK) && !(bto & BT_ATTACK) && mouthclear()) {
			if (fluidonly()) {
				int sipsize = min(random[uas_mk](15,30), item.fluid - item.fluid_consumed);
				weaponstatus[MKS_SIP] = sipsize;
				item.fluid_consumed += sipsize;
				owner.A_StartSound("UaS/Swish", CHAN_WEAPON);
			}
			else {
				int bitesize = min(random[uas_mk](50,75), item.energy - item.energy_consumed);
				weaponstatus[MKS_BITE] = bitesize;
				item.energy_consumed += bitesize;
			}
		}
		// Cycle down
		else if ((bt & BT_RELOAD) && !(bto & BT_RELOAD)) {
			weaponstatus[MKS_SELECTED]++;
			if (weaponstatus[MKS_SELECTED] >= foodarray.size()) { weaponstatus[MKS_SELECTED] = 0; }
		}
		// Cycle up
		else if ((bt & BT_ALTRELOAD) && !(bto & BT_ALTRELOAD)) {
			weaponstatus[MKS_SELECTED]--;
			if (weaponstatus[MKS_SELECTED] < 0) { weaponstatus[MKS_SELECTED] = foodarray.size()-1; }
		}
	}

	bool mouthclear() {
		return (weaponstatus[MKS_BITE] <= 0 && weaponstatus[MKS_SIP] <= 0);
	}

	bool fluidonly() {
		return (
			foodarray[weaponstatus[MKS_SELECTED]].energy <=0 &&
			foodarray[weaponstatus[MKS_SELECTED]].fluid >0
		);
	}

	void Consume() {
		if (mouthclear()) { return; }
		if (weaponstatus[MKS_SIP] > 0) {
			weaponstatus[MKS_SIP]--;
			owner.A_StartSound("UaS/Sip", CHAN_VOICE, CHANF_NOSTOP, volume: frandom[uas_mk](0.25, 0.5));
			console.printf("Sipping "..weaponstatus[MKS_SIP]);
		}
		else if (weaponstatus[MKS_BITE] > 0 && level.maptime % 5 == 0) {
			owner.A_StartSound("UaS/Chew", CHAN_VOICE, CHANF_NOSTOP, volume: frandom[uas_mk](0.4, 0.75));
			weaponstatus[MKS_BITE] -= min(random[uas_mk](1,10), weaponstatus[MKS_BITE]);
			console.printf("chewing "..weaponstatus[MKS_BITE]);
		}
		if (mouthclear()) {
			console.printf("Swallowed");
			owner.A_StartSound("UaS/Swallow", CHAN_VOICE);
			return;
		}
	}

	void BuildFoodList() {
		foodarray.clear();
		let i = owner.inv;
		while (i) {
			if (i is 'UaS_Consumable') {
				UaS_Consumable fi = UaS_Consumable(i);
				foodarray.push(fi);
			}
			i = i.inv;
		}
	}

	void DisplayList() {
		UaS_Consumable item = foodarray[weaponstatus[MKS_SELECTED]];
		if (foodarray.size() == 0) {
			statusmessage = statusmessage.."No consumables!\n\n";
			return;
		}
		else {
			for (int i=0; i < foodarray.size(); i++) {
				if (i == weaponstatus[MKS_SELECTED]) { statusmessage = statusmessage.."\cb"; }
				statusmessage = statusmessage
					..foodarray[i].gettag().." \c-x"
					..owner.countinv(foodarray[i].GetClassName()).."\n";
			}
		}
		statusmessage = statusmessage
			.."\n\n"
			..int(item.energy-item.energy_consumed).."\n"
			..int(item.fluid-item.fluid_consumed).."\n"
			..item.description.."\n";
	}

	override int getsbarnum(int flags){return foodarray.size();}

	void debugstatus() {
		if (!(UaS_Debug & Hunger)) { return; }
		statusMessage = statusMessage
			.."energy "..int(tracker.calories).."\n"
			.."fluid "..int(tracker.water).."\n";
	}

	enum Slots {
		MKS_SELECTED,
		MKS_BITE,
		MKS_SIP,
	}
}
