class UaS_Consumable : HDWeapon {
	UaS_HungerTracker tracker;

	int energy;
	int fluid;
	int bulk;
	int consumableflags;
	string description;
	string itemsprite;
	string opensound;
	int itemframe;
	bool opened;
	float amountleft;
	property Energy: energy;
	property Fluid: fluid;
	property Bulk: bulk;
	property Description: description;
	property Appearance: itemsprite, itemframe;
	property OpenSound: opensound;
	flagdef Liquid: consumableflags, 0;

	default {
		UaS_Consumable.Energy 100;
		UaS_Consumable.Fluid 10;
		UaS_Consumable.Bulk 5;
		UaS_Consumable.Description "A generic block of vaguely food-like mush. Probably obtained via console commands.";
		UaS_Consumable.Appearance "HSCV", 0; //Sprite name string, frame # (A = 0, B = 1, etc)
		UaS_Consumable.OpenSound "UaS/FoodOpen";
		//+UaS_Consumable.Liquid;
		Inventory.PickupMessage "Picked up a generic consumable. You really shouldn't have this.";
		Inventory.Icon "HSCVA0";
		Inventory.PickupSound "weapons/pocket";
		Inventory.MaxAmount 500;
		hdweapon.nicename "Consumable";
		hdweapon.fitsinbackpack true;
		//hdweapon.refid UAS_HDLD_CONSUME;
		+INVENTORY.INVBAR;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.IGNORESKILL;
		+WEAPON.NO_AUTO_SWITCH;
		+WEAPON.CHEATNOTWEAPON;
		+WEAPON.WIMPY_WEAPON;
	}

	override void DoEffect() {
		super.DoEffect();
		if (!owner.player) { return; }
		if (!(owner.player.readyweapon.GetClassName() == GetClassName())) {
			if (opened) {
				owner.TakeInventory(self.GetClassName(), 1);
				amountleft = 0.0;
				console.printf("dropped");
			}
			return;
		}
		if (owner.player.health <= 0) { return; }
	}

	void ConsumableReady() {
		//Message header
		string message;
		message = "===\cj"..nicename.."\c-===\n\n";
		message = message..description.."\n\n\n";
		if (bLIQUID) { message = message.."\cn"..fluid.."ml\c-\n\n\n"; }
		else { message = message.."\ce"..energy.."kcal\c-\n\n\n"; }

		//Input handler
		switch (opened) {
			case false:
				message = message.."Press \caReload\c- to open the package.\n\n";
				if(JustPressed(BT_RELOAD)) {
					opened = true;
					amountleft = 1.0;
					A_PlaySound(opensound);
					console.printf("Opened!");
				}
				break;
			case true:
				break;
		}

		//Warning message appended to end of status
		message = message.."Opened packages will be discarded even if not fully consumed!";
		A_WeaponMessage(message, 175);
	}

	States {
		Spawn:
			TNT1 A -1 { invoker.UpdateSprite(); }
			Stop;
		Ready:
			TNT1 A 1 {
				A_WeaponReady(WRF_ALL);
				invoker.ConsumableReady();
			}
			goto super::readyend;
	}

	override double weaponbulk() {
		return bulk;
	}

	override void BeginPlay() {
		UpdateSprite();
		super.BeginPlay();
	}

	void UpdateSprite() {
		sprite = GetSpriteIndex(itemsprite);
		frame = itemframe;
	}

	//Stolen from HDWeapon and updated slightly to work in this context
	bool PressingFire(){return owner.player.cmd.buttons&BT_ATTACK;}
	bool PressingAltfire(){return owner.player.cmd.buttons&BT_ALTATTACK;}
	bool PressingReload(){return owner.player.cmd.buttons&BT_RELOAD;}
	bool PressingZoom(){return owner.player.cmd.buttons&BT_ZOOM;}
	bool PressingAltReload(){return owner.player.cmd.buttons&BT_USER1;}
	bool PressingFiremode(){return owner.player.cmd.buttons&BT_USER2;}
	bool PressingUser3(){return owner.player.cmd.buttons&BT_USER3;}
	bool PressingUnload(){return owner.player.cmd.buttons&BT_USER4;}
	bool PressingUse(){return owner.player.cmd.buttons&BT_USE;}
	bool Pressing(int whichbuttons){return owner.player.cmd.buttons&whichbuttons;}
	bool JustPressed(int whichbutton){return(owner.player.cmd.buttons&whichbutton&&!(owner.player.oldbuttons&whichbutton));}
	bool JustReleased(int whichbutton){return(!(owner.player.cmd.buttons&whichbutton)&&owner.player.oldbuttons&whichbutton);}
}

class UaS_MessKit : HDWeapon {
	UaS_HungerTracker tracker;
	int biteSize;
	int mealSize;
	int drinkSize;
	int sipSize;
	double speedFactor;
	string flavor;

	default {
		Scale 0.5;
		Inventory.PickupMessage "Picked up messkit.";
		Inventory.Icon "HSCVB0";
		+INVENTORY.INVBAR;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.IGNORESKILL;
		hdweapon.nicename "Messkit";
		hdweapon.fitsinbackpack true;
		hdweapon.refid UAS_HDLD_MESSKIT;
	}

	override double weaponbulk(){
		return 15;
	}

	override void DoEffect() {
		speedFactor = clamp(double(UaS_HungerTimeScale) / 10, 1, 12);
		super.DoEffect();
	}

	override inventory CreateTossable(int amt) {
		UaS_TossOpened(true);
		return super.CreateTossable();
	}

	States {
		Spawn:
			HSCV B -1;
			Stop;
		Select:
			TNT1 A 10 UaS_SelectText();
			goto Super::Select;
		DeselectHold:
			TNT1 A 1;
			TNT1 A 0 A_Refire("DeselectHold");
			TNT1 A 0{
				A_SelectWeapon("HDFist");
				A_WeaponReady(WRF_NOFIRE);
			}
			goto nope;
		Fire:
			TNT1 A 0 EatOrDrink(1);
			goto nope;
		AltFire:
			TNT1 A 0 EatOrDrink(2);
			goto nope;
		Eat:
			TNT1 A 0 UaS_CheckConsumables(1);
			goto nope;
		Scoop:
			TNT1 A 0 UaS_TakeScoop();
			TNT1 A random(15,20);
			TNT1 A 0 A_Refire("Consume");
			goto nope;
		Consume:
			TNT1 A 0 UaS_Consume();
			TNT1 A random(8,12);
			TNT1 A 0 A_Refire("Consume");
			goto Swallow;
		Drink:
			TNT1 A 0 UaS_CheckConsumables(2);
			goto nope;
		Sip:
			TNT1 A 0 UaS_Sip();
			TNT1 A 1;
			TNT1 A 0 A_Refire("Sip");
			goto Swallow;
		Reload:
		OpenFood:
			TNT1 A random(15,20) UaS_OpenFood();
			goto nope;
		User1:
		OpenWater:
			TNT1 A random(15,20) UaS_OpenWater();
			goto nope;
		Swallow:
			TNT1 A random(8,12) A_PlaySound("weapons/pocket");
			goto nope;
		User4:
		Toss:
			TNT1 A 1 { invoker.UaS_TossOpened(true); }
			goto nope;
		Firemode:
		DisplayStatus:
			TNT1 A 1 DisplayStatus();
			goto nope;
	}

	action void DisplayStatus() {
		invoker.tracker = UaS_HungerTracker(FindInventory("UaS_HungerTracker", false));
		if(!invoker.tracker) { return; }
		invoker.tracker.lastcalories = invoker.tracker.calories + 250;
		invoker.tracker.lastwater = invoker.tracker.water + 200;
	}

	//Displayed when the messkit is opened for use
	action void UaS_SelectText() {
		DisplayStatus();
		if(!getcvar("hd_helptext")) return;
		string message = "\cjMESS KIT\c-\n\n\n";
		if(CVar.GetCVar('UaS_HungerAutoselect', invoker.owner.player).GetBool()) { message = message.."Hold \caFire\cu to eat and drink.\n\n"; }
		else {
			message = message.."Hold \caFire\cu to eat,\n";
			message = message.."and \caAltFire\cu to drink.\n\n";
		}
		message = message.."\caReload\cu opens a new ration.\n\n";
		message = message.."\caAltReload\cu opens a water ration.\n\n";
		message = message.."\caUnload\cu dumps the current ration,\n";
		message = message.."discarding all remaining contents\n\n\n";
		//message = message.."Food Rations: "..invoker.owner.countinv("UaS_FoodRation").."\n";
		//message = message.."Water Rations: "..invoker.owner.countinv("UaS_WaterRation").."\n";
		A_WeaponMessage(message, 175);
	}

	//Determine whether to eat or drink
	action state EatOrDrink(int userIntent) {
		invoker.tracker = UaS_HungerTracker(FindInventory("UaS_HungerTracker", false));
		if(!invoker.tracker) { return ResolveState(null); }

		//Check if anything's left at all
		if(invoker.mealSize <=0 && invoker.drinkSize <=0) {
			TrackerStatusMessage("Nothing to eat or drink!\nHave you opened a ration?");
		}

		// If CVar set, prioritize depending on which one the player needs more.
		if(CVar.GetCVar('UaS_HungerAutoselect', invoker.owner.player).GetBool()) {
			if(invoker.mealSize > 0 && (invoker.tracker.calories <= invoker.tracker.water || invoker.drinkSize <= 0)) { return ResolveState("Eat"); }
			if(invoker.drinkSize > 0 && (invoker.tracker.water < invoker.tracker.calories || invoker.mealSize <= 0)) { return ResolveState("Drink"); }
		}

		// Otherwise let the player pick
		if(userIntent == 1) { return ResolveState("Eat"); }
		else if(userIntent == 2) { return ResolveState("Drink"); }

		return ResolveState(null);
	}

	//Makes sure the player has a food item open and food available.
	action state UaS_CheckConsumables(int type = 1) {
		invoker.tracker = UaS_HungerTracker(FindInventory("UaS_HungerTracker", false));
			if(type == 1 && invoker.mealSize > 0) {
				if(invoker.tracker.calories >= 2500) {
					TrackerStatusMessage("You're full.\nCouldn't eat another bite.");
					return ResolveState("nope");
				}
				return ResolveState("Scoop");
			}
			if(type == 2 && invoker.drinkSize > 0) {
				if(invoker.tracker.water >= 2500) {
					TrackerStatusMessage("You're full.\nCouldn't drink another drop.");
					return ResolveState("nope");
				}
				A_PlaySound("misc/smallslop");
				return ResolveState("Sip");
			}
			invoker.UaS_TossOpened(false);
		return ResolveState(null);
	}

	//Takes a random-sized "bite" of the food
	action void UaS_TakeScoop() {
		double difference = clamp(2500 - invoker.tracker.calories, 0, 500);
		A_PlaySound("UaS/FoodScoop", CHAN_AUTO, frandom(0.3, 0.6));
		invoker.biteSize  = min(invoker.mealsize, 75 * invoker.speedFactor) * frandom(0.75,1.0);;
		invoker.biteSize *= (difference / 500.0);
		invoker.biteSize  = clamp(invoker.biteSize, 1, 75 * invoker.speedFactor);
	}

	//"Chew" the food
	action state UaS_Consume() {
		invoker.tracker = UaS_HungerTracker(FindInventory("UaS_HungerTracker", false));
		if(invoker.bitesize > 0) {
			//Chew
			int chunk = random(1,10) * invoker.speedFactor;
			A_PlaySound("weapons/pocket", CHAN_AUTO, frandom(0.25, 0.6));
			A_PlaySound("misc/fragroll", CHAN_AUTO, frandom(0.25, 0.7));
			invoker.mealSize -= clamp(chunk, 0, invoker.biteSize);
			invoker.tracker.calories += clamp(chunk, 0, invoker.biteSize);
			invoker.biteSize -= clamp(chunk, 0, invoker.biteSize);
			TrackerStatusMessage("Eating...");
			return ResolveState(null);
		}
		return ResolveState("Swallow");
	}

	//Consume a random amount of water "drops" to simulate drinking
	action state UaS_Sip() {
		invoker.tracker = UaS_HungerTracker(FindInventory("UaS_HungerTracker", false));
		int drops = random(1,2) * invoker.speedFactor;
		for(int i = 1; i <= drops; i++) {
			invoker.sipsize += 1;
			invoker.tracker.water += 1;
			invoker.drinksize -= 1;
			TrackerStatusMessage("Drinking...");
			if(invoker.drinksize <= 0 || invoker.sipSize > random(25,50) * invoker.speedFactor) {
				invoker.sipsize = 0;
				return ResolveState("Swallow");
			}
		}
		return ResolveState(null);
	}

	//Open a new food ration and add it to the meal
	action void UaS_OpenFood() {
		if(countinv("UaS_FoodRation") > 0) {
			if(invoker.mealSize < 500) {
				invoker.owner.TakeInventory("UaS_FoodRation",1);
				A_PlaySound("imp/melee");
				invoker.mealSize += random(5, 10) * 25;
				//invoker.flavor = RandomFlavor();
				TrackerStatusMessage("Opened Food Ration!");
			}
			else {
				TrackerStatusMessage("Your plate is full!");
			}
		}
		else {
			TrackerStatusMessage("You have no more food rations!");
		}
	}

	//Open a new water ration and add it to the meal
	action void UaS_OpenWater() {
		if(countinv("UaS_WaterRation") > 0) {
			if(invoker.drinksize < 500) {
				invoker.owner.TakeInventory("UaS_WaterRation",1);
				A_PlaySound("misc/smallslop");
				invoker.drinkSize += random(40, 50) * 5;
				TrackerStatusMessage();
			}
			else {
				TrackerStatusMessage("Your cup is full!");
			}
		}
		else {
			TrackerStatusMessage("You have no more water rations!");
		}
	}

	//Toss opened ration
	void UaS_TossOpened(bool force = false) {
		if((drinkSize > 0 || mealSize > 0) && force == false) { return; }
		if(owner.getcvar("hd_helptext") && (mealsize > 0 || drinkSize > 0)) { TrackerStatusMessage("Tossed leftovers. No 5-second rule here."); }
		biteSize = 0;
		mealSize = 0;
		drinksize = 0;
		sipsize = 0;
		flavor = "";
	}

	action void TrackerStatusMessage(string status = "") {
		string message = "\cj"..status.."\n\n";
		message = message.."\cc--Plate--\cu\n";
		message = message.."\cbFood left: "..invoker.mealSize.."\cu\n";
		message = message.."\cnWater left: "..invoker.drinkSize.."\cu\n\n";
		message = message.."\cc--Supplies--\cu\n";
		message = message.."Food Rations: "..invoker.owner.countinv("UaS_FoodRation").."\n";
		message = message.."Water Rations: "..invoker.owner.countinv("UaS_WaterRation").."\n";
		A_WeaponMessage(message);
	}
}
