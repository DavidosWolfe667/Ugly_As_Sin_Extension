extend class UaS_Messkit {
	override void DoEffect() {
		if (!CriticalChecks()) { return; }

		statusMessage = "... \cjMesskit\c- ...\n\n";

		DisplayList();
		HandleInput();

		debugstatus();
		A_WeaponMessage(statusMessage);
	}

	void DisplayList() {
		if (foodarray.size() == 0 || !item) {
			statusmessage = statusmessage.."Nothing to consume!\n\n";
			return;
		}
		for (int i=0; i < foodarray.size(); i++) {
			if (i == weaponstatus[MKS_SELECTED]) { statusmessage = statusmessage.."\cb"; }
			statusmessage = statusmessage
				..foodarray[i].gettag().." \c-x"
				..owner.countinv(foodarray[i].GetClassName()).."\n";
		}
		statusmessage = statusmessage
			.."\n\n"
			..int(item.energy - item.energy_consumed).."\n"
			..int(item.fluid - item.fluid_consumed).."\n"
			..item.description.."\n";
	}

	void HandleInput() {
		int bt = owner.player.cmd.buttons;
		int bto = owner.player.oldbuttons;

		if (foodarray.size() == 0) { return; }

		//Take a bite
		if ((bt & BT_ATTACK) && !(bto & BT_ATTACK) && mouthclear()) {
			if (fluidonly()) {
				int sipsize = min(random[uas_mk](15,30), item.fluid - item.fluid_consumed);
				weaponstatus[MKS_SIP] = sipsize;
				item.fluid_consumed += sipsize;
				owner.A_StartSound("UaS/Swish", CHAN_WEAPON);
			}
			else {
				int bitesize = min(random[uas_mk](50,75), item.energy - item.energy_consumed);
				weaponstatus[MKS_BITE] = bitesize;
				item.energy_consumed += bitesize;
			}
		}
		// Cycle down
		else if ((bt & BT_RELOAD) && !(bto & BT_RELOAD)) {
			weaponstatus[MKS_SELECTED]++;
			if (weaponstatus[MKS_SELECTED] >= foodarray.size()) { weaponstatus[MKS_SELECTED] = 0; }
		}
		// Cycle up
		else if ((bt & BT_ALTRELOAD) && !(bto & BT_ALTRELOAD)) {
			weaponstatus[MKS_SELECTED]--;
			if (weaponstatus[MKS_SELECTED] < 0) { weaponstatus[MKS_SELECTED] = foodarray.size()-1; }
		}
	}
}
