const UAS_AI_PROC_RANGE = HDCONST_ONEMETRE * 150;

class UaS_AI_Handler : Inventory {
	int RecheckAI;
	bool ProcessAI;

	override void BeginPlay() {
		super.BeginPlay();
		countdown = -1; // -1 = "no countdown", to prevent repeated triggering of zero conditions
	}

	override void PostBeginPlay() {
		super.PostBeginPlay();
		WoundDebuffInit();
	}

	override void DoEffect() {
		if(!owner) { destroy(); return; }
		if(owner.health <= 0) { return; }
		WoundDebuff(); // this one is low-cost enough

		// Periodically (random delay) recheck to turn on higher-cost AI
		RecheckAI--;
		if(RecheckAI <= 0) {
			ProcessAI = PlayerProxCheck();
			RecheckAI = random[ai_proc](35,350);
		}
		if(!ProcessAI) { return; }

		SearchBehavior();
		Flashlight();
		if (UaS_Debug & AI) {
			console.printf(level.maptime
				..": Processed AI for "
				..owner.GetClassName()
				..score);
		}
	}

	bool PlayerProxCheck() {
		double closestPlayer = UAS_AI_PROC_RANGE**3;
		for (int i = 0; i < MAXPLAYERS; i++) {
			if(!playerInGame[i]) continue;
			closestPlayer = min(owner.Distance3DSquared(players[i].mo), closestPlayer);
		}
		if (UaS_Debug & AI) {
			console.printf(level.maptime
				..": Proxcheck AI for "
				..owner.GetClassName()
				..score.." "
				..bool(closestPlayer <= (UAS_AI_PROC_RANGE**2)));
		}
		return (closestPlayer <= (2048**2));
	}
}
