const CHAN_RESP = 82698380;
const CHAN_BREATH = 82698381;

class UaS_Respirator : HDMagAmmo {
	bool activated, refill;
	int breath, reserve, airunits;

	default {
		Height 12;
		Radius 4;
		Inventory.Icon "UGSID0";
		Inventory.PickupMessage "Picked up an emergency respirator.";
		+Inventory.Invbar;
		HDMagAmmo.mustshowinmagmanager true;
		HDMagAmmo.maxperunit 100;
		HDMagAmmo.roundbulk 0.05;
		HDMagAmmo.magbulk 30;
		HDMagAmmo.inserttime 6;
		HDMagAmmo.extracttime 4;
		tag "Emergency respirator";
		HDPickup.refid UAS_HDLD_RESPIRATOR;
	}

	override void DoEffect() {
		//console.printf("breath "..owner.player.air_finished - Level.maptime);
		//console.printf(""..airunits);
		super.DoEffect();
		if (mags.size() < 1) { return; }

		if (activated) {
			// use sub-units of air so player has at least one breath per mag unit
			if (airunits <= 0 && mags[0] > 0) {
				airunits += 105;
				mags[0]--;
			}
			if(airunits > 0) {
				Breathe();
				owner.player.air_finished = Level.maptime + reserve;
			}
			else if (mags[0] == 0 || owner.health <= 0) {
				owner.A_StopSound(CHAN_BREATH);
				owner.A_StartSound("UaS/respirator/empty",
					CHAN_RESP, CHANF_OVERLAP, 1, ATTN_STATIC, 1);
				activated = false;
			}
		}

		if (!activated && refill) { DoRefill(); }
	}

	override bool Use(bool pickup) {
		PlayerPawn o = playerpawn(owner);

		if (!activated && (o.player.buttons & BT_USE)) { refill = !refill; return false; }

		if (mags[0] == 0) {
			owner.A_Log("Canister empty. Hold [use] and activate to refill.", true);
			return false;
		}

		else if (mags[0] > 0) {
			ToggleRespirator();
		}

		return false;
	}

	void Breathe() {
		hdplayerpawn o = hdplayerpawn(owner);
		int increment = 1 + (o.fatigue / 5);
		if (breath == 0)   { BreathSound(1.1); }
		if (breath == 120) { BreathSound(0.9); breath = -breath; }
		if (breath >= 0)   { breath = min(breath + increment, 120); }
		if (breath <  0)   { breath = min(breath + increment, 0); }
		if (reserve < level.AirSupply) { reserve++; }
		airunits -= increment;
	}

	void ToggleRespirator() {
		owner.A_StopSound(CHAN_BREATH);
		owner.A_StartSound("UaS/respirator/click",
			CHAN_AUTO, 0, 1, ATTN_STATIC);
		PlayerPawn o = playerpawn(owner);
		owner.A_StartSound("UaS/respirator/toggle",
			CHAN_AUTO, 0, 1, ATTN_STATIC);
		reserve = clamp(o.player.air_finished - Level.maptime, 0, level.AirSupply);
		breath = 0;
		activated = !(activated);
		refill = false;
	}

	void DoRefill() {
		if (owner.waterlevel >= 3 ) {
			owner.A_Log("Can't refill canister underwater.", true);
			refill = false;
			return;
		}

		if (mags[0] >= maxperunit) {
			owner.A_Log("Canister full.", true);
			refill = false;
			return;
		}

		if (level.maptime % 5 == 0) {
			owner.A_StartSound("UaS/respirator/pump",
				CHAN_RESP, CHANF_OVERLAP, 0.1, ATTN_STATIC, 2.0 - (mags[0]/double(maxperunit)));
		}
		if (level.maptime % 15 == 0) { mags[0]++; }
		if (level.maptime % 35 == 0) {
			owner.A_StartSound("UaS/respirator/toggle",
				CHAN_RESP, CHANF_OVERLAP, 0.2, ATTN_STATIC, 2.0 - (mags[0]/double(maxperunit)));
		}
	}

	// Bleed air
	override bool Extract() {
		SyncAmount();
		if (mags.size() < 1 || mags[mags.size()-1] < 1) { return false; }
		mags[mags.size()-1]--;
		owner.A_StartSound("UaS/respirator/vent",
			CHAN_RESP, CHANF_OVERLAP, 0.3, ATTN_STATIC, 2.0);
		return true;
	}

	// Fill from lowest available other tank
	override bool Insert() {
		SyncAmount();
		if(amount < 2) { return mags[0]; }
		if (mags[mags.size()-1] >= maxperunit) { return false; }
		int lowestindex =- 1;
		int lowest = maxperunit;
		for (int i=0; i<amount-1; i++){
			if(lowest > mags[i] && mags[i] > 0){
				lowest = mags[i];
				lowestindex = i;
			}
		}
		if (lowestindex < 0) { return false; }
		if (mags[lowestindex] < 1) { return false; }
		mags[lowestindex]--;
		mags[mags.size()-1]++;
		owner.A_StartSound("UaS/respirator/vent",
			CHAN_RESP, CHANF_OVERLAP, 0.3, ATTN_STATIC, 3.0);
		return true;
	}

	void BreathSound(double breathpitch) {
		owner.A_StartSound("UaS/respirator/breathing",
			CHAN_BREATH, 0, frandom[uas_resp](0.25, 0.5), ATTN_STATIC, breathpitch);
	}

	override string PickupMessage() {
		string msg = super.PickupMessage();
		string status;
		if (mags[mags.size()-1] >= maxperunit) {
			status = "It is full.";
		}
		else if (mags[mags.size()-1] == 0) {
			status = "It is empty.";
		}
		else {
			status = string.format("It is at "..mags[mags.size()-1].." percent capacity");
		}
		return string.format(""..msg.." "..status);
	}

	override string,string,name,double getmagsprite(int thismagamt){
		string magsprite="UGSID0";
		return magsprite,"","",0.6;
	}

	override int getsbarnum(int flags){
		if (mags.size() < 1) { return 0; }
		return int(mags[0]);
	}

	override void DetachFromOwner() {
		if (activated) { ToggleRespirator(); }
		super.DetachFromOwner();
	}

	states {
		spawn:
			UGSI D 0 -1;
			stop;
	}
}
