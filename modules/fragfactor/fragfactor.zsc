class UaS_FragRemovalHandler : EventHandler {
	override void WorldThingSpawned(WorldEvent e) {
		if(!e.Thing) { return; }
		if(UaS_FragSpawnRate == 100 || UaS_FragReducerEnabled == false) { return; }
		double removeChance = 1.0 - (double(UaS_FragSpawnRate) * 0.01);
		switch(e.Thing.GetClassName()) {
			case 'FragShard':
			case 'BFGNecroShard':
			case 'NecroShard':
			case 'NecroGhostShard':
				if(UaS.RandomChance(removeChance)) {
					if(UaS_Debug & Frag) { console.printf("%s despawned %f", e.Thing.GetClassName(), removeChance); }
					e.Thing.Destroy();
				}
				break;
		}
	}

	override void NetworkProcess(ConsoleEvent e) {
		if(e.Name == "UaS_RemoveFrag") {
			int RemovedShards = RemoveLevelFrag();
			console.printf("Removed "..RemovedShards.." frag shards.");
		}
	}

	int RemoveLevelFrag() {
		int count = 0;
		let iterator1 = ThinkerIterator.Create("FragShard");
		for (Thinker mo; (mo = iterator1.Next());) { mo.Destroy(); count++; }
		let iterator2 = ThinkerIterator.Create("BFGNecroShard");
		for (Thinker mo; (mo = iterator2.Next());) { mo.Destroy(); count++;}
		let iterator3 = ThinkerIterator.Create("NecroShard");
		for (Thinker mo; (mo = iterator3.Next());) { mo.Destroy(); count++;}
		let iterator4 = ThinkerIterator.Create("NecroGhostShard");
		for (Thinker mo; (mo = iterator3.Next());) { mo.Destroy(); count++;}
		return count;
	}
}
